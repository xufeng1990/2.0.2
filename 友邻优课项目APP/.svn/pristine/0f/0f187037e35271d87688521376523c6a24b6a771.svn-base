package com.reactutils.encryption;

import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;

/**
 * Created by xyb on 2017/2/13.
 */

public class EncryptionModule extends ReactContextBaseJavaModule {
    public EncryptionModule(ReactApplicationContext reactContext) {
        super(reactContext);
    }

    @Override
    public String getName() {
        return "EncryptionModule";
    }

    /**
     * 对传入的数据进行MD5加密 然后通过Promise方法回调到JS端
     *
     * @param encryptionMsg
     * @param promise
     */
    @ReactMethod
    public void MD5ByPromise(String encryptionMsg, Promise promise) {
        try {
            String result = EncryptionTools.MD5(encryptionMsg);
            promise.resolve(result);
        } catch (Exception e) {
            promise.reject(e);
            e.printStackTrace();
        }
    }

    /**
     * 对传入的数据进行MD5加密 然后通过Promise方法回调到JS端
     *
     * @param encryptionMsg
     * @param promise
     */
    @ReactMethod
    public void SHA1ByPromise(String encryptionMsg, Promise promise) {
        try {
            String result = EncryptionTools.SHA1(encryptionMsg);
            promise.resolve(result);
        } catch (Exception e) {
            promise.reject(e);
            e.printStackTrace();
        }
    }

    /**
     * 对传入的数据进行MD5加密 然后通过Promise方法回调到JS端
     *
     * @param encryptionMsg
     * @param promise
     */
    @ReactMethod
    public void BASE64ByPromise(String encryptionMsg, Promise promise) {
        try {
            String result = EncryptionTools.BASE64(encryptionMsg);
            promise.resolve(result);
        } catch (Exception e) {
            promise.reject(e);
            e.printStackTrace();
        }
    }

    /**
     * 对传入的数据进行HmacSHA1加密 然后通过Promise方法回调到JS端
     *
     * @param encryptText
     * @param encryptKey
     * @param promise
     */
    @ReactMethod
    public void HmacSHA1ByPromise(String encryptText, String encryptKey, Promise promise) {
        try {
            String result = EncryptionTools.HmacSHA1(encryptText, encryptKey);
            promise.resolve(result);
        } catch (Exception e) {
            promise.reject(e);
            e.printStackTrace();
        }
    }


    /**
     * 对传入的数据进行HmacSHA1加密 然后通过Promise方法回调到JS端
     *
     * @param encryptText
     * @param encryptKey
     * @param promise
     */
    @ReactMethod
    public void HmacMD5ByPromise(String encryptText, String encryptKey, Promise promise) {
        try {
            String result = EncryptionTools.HmacMD5(encryptText, encryptKey);
            promise.resolve(result);
        } catch (Exception e) {
            promise.reject(e);
            e.printStackTrace();
        }
    }


}
