//  "courseTabbar"
//  功能: TODO 该类的作用
//  Created by 刘云强 on  2017
//  Copyright © 2017年  琢磨科技.

'use strict';
import React, {Component} from 'react';
import {
    Text,
    View,
    Image,
    TextInput,
    ScrollView,
    ListView,
    StyleSheet,
    TouchableOpacity,
    TouchableHighlight,
    TouchableWithoutFeedback,
    Alert,
    NativeEventEmitter,
    DeviceEventEmitter,
    NativeModules
} from 'react-native';
//common
import Util from '../../common/util.js';
import Icon from '../../common/Icon.js';
//configs
import g_AppValue from '../../configs/AppGlobal.js';
import YLYKNatives from '../../configs/ylykbridges/YLYKNatives.js';
//component
import NavigationBar from '../../component/Navigator/NavigationBar.js';
import Banner from '../../component/Banner/Banner.js';
import BlankPages from '../../component/AlbumCell/BlankPages.js';
//pages
import DailyNews from './DailyNews.js';
import Album from './Album.js';
import Pay from '../Pay/pay.js';

//登陆监听
var LoginEvents = NativeModules.LoginEvent;
const myLoginEvent = new NativeEventEmitter(LoginEvents);
var loginSubscription;

//退出登录成功
var LogoutEvents = NativeModules.LogoutEvent;
const myLogoutEvent = new NativeEventEmitter(LogoutEvents);
var logoutSubscription;


//每日新闻
var Bridges = NativeModules.BridgeEvents;
const myEvent = new NativeEventEmitter(Bridges);
var subscription;

//支付成功
var PaySuccessEvents = NativeModules.PayEvent;
const myPaySuccessEvents = new NativeEventEmitter(PaySuccessEvents);
var paySuccessSubscription;

export default class Course extends Component {
    // 构造函数
    constructor(props) {
        super(props);
        this.state = {
            isPlayingOrPause: 0,//监听播放git图动态
            noLogin: false,//没有登录
            NoVip: false,//不是会员
            isExistPlayedTrace: 1//判断是否等过课
        };
    }

    componentWillMount() {

        this._getUserID();//获取UserId
        //监听是否第一次下载App
        this.subscription = myEvent.addListener('playOrPauseToRN', (reminder) => {
            this.setState({isPlayingOrPause: reminder.isPlayingOrPause, isExistPlayedTrace: 1})
        });
        //二级页面返回显示TabBar
        this.showCourseTabBar = DeviceEventEmitter.addListener('showCourseTabBar', () => {

            YLYKNatives.$showOrHideTabbar.showOrHideTabbar('show');
        });

        //登陆成功更新数据 , UserId
        this.loginSubscription = myLoginEvent.addListener('LoginSuccess', (reminder) => {
            this._getUserID();

        });
        //注销成功更新数据 , UserId
        this.logoutSubscription = myLogoutEvent.addListener('LogoutSuccess', (reminder) => {
            if (reminder.LogoutSuccess) {
                this._getUserID();

            }
        })
        //加载页面获取是否第一次下载App 判断显示播放git
        YLYKNatives.$player.isExistPlayedTrace()
        .then((data) => {
            this.setState({isExistPlayedTrace: data})
        })
        //支付成功更新用户信息
        this.paySuccessSubscription = myPaySuccessEvents.addListener('PayEvent', (reminder) => {
            if (reminder.PaySuccess) {
                this.interval = setInterval(() => {
                    this._getUserID();

                }, 5000);
            } else {
                return;
            }
        })
    }

    // view卸载
    componentWillUnmount() {
        //监听卸载
        this.showCourseTabBar && this.showCourseTabBar.remove();
        this.subscription && this.subscription.remove();
        this.loginSubscription && this.loginSubscription.remove();
        this.logoutSubscription && this.logoutSubscription.remove();
        this.paySuccessSubscription && this.paySuccessSubscription.remove();
    }
    componentDidMount() {
          YLYKNatives.$player.isPlayingOrPause()
          .then((data) => {
            this.setState({isPlayingOrPause: data.isPlayingOrPause})
        }).catch((err) => {
            // console.log('错误' + err)
            Util.AppToast('网络出错,请稍后再试')

        })
    }
    //搜索按钮
    _leftItemAction() {
        YLYKNatives.$search.goToSearchView();
    }
    //播放按钮
    _rightItemAction(is1, is, is2) {
        if (this.state.noLogin == false) {
            Util.AppToast('请先登录');
        } else {
            if (this.state.NoVip == false) {
                this._alert();
            } else {
                YLYKNatives.$player.openPlayerController(is1, is, is2);
            }
        }

    }
    //小答应跳转
    goToQiView() {
        YLYKNatives.$qiyu.goToQiyu();
    }
    //支付跳转
    goToPayView() {
      YLYKNatives.$showOrHideTabbar.showOrHideTabbar('hide');
        this.props.navigator.push({component: Pay})
    }

    //alert提示
    _alert() {
        Util.alertDialog({
            msg: '成为友邻学员即可收听此课程',
            oneBtn: '立即入学',
            okBtn: '咨询阿树老师',
            cancelBtn: '取消',
            okFun: () => {
                this.goToQiView()
            },
            oneFun: () => {
                this.goToPayView()
            }
        })
    }

    //获取用户信息
    _getUserID() {
      for (let $ in YLYKNatives) {
        console.log("hhhhhhh " + $);
      }
        YLYKNatives.$oauth.getUserInfo()
        .then((data) => {
            var resultData = JSON.parse(data);
            if (data == 0 || data == '0') {
                this.setState({noLogin: false})
            } else {
                this.setState({noLogin: true})
                let isVip = Util.isVip(resultData)
                if (isVip == false) {
                    this.setState({NoVip: false})
                } else {
                    this.setState({NoVip: true})
                    this.interval && this.interval.remove();
                }
            }
        }).catch((err) => {
        })

    }

    // render
    render() {

        return (
            <View style={{flex: 1,backgroundColor: '#f2f5f6'}}>

                <NavigationBar
                  title='课程'
                  leftItemTitle={Icon.search}
                  leftItemFunc={this._leftItemAction.bind(this)}
                  rightImageSource={this.state.isExistPlayedTrace == 1
                    ? this.state.isPlayingOrPause == 0
                        ? require('../../imgs/play1.png')
                        : require('../../imgs/play.gif')
                    : require('../../imgs/noImage.png')}
                    rightItemFunc= {this.state.isExistPlayedTrace == 1 ? ()=>this._rightItemAction('0',false,'[]') : null}
                    />

                <ScrollView showsVerticalScrollIndicator={false}>

                    <Banner navigator={this.props.navigator}/>

                    <DailyNews navigator={this.props.navigator}/>

                    <Album navigator={this.props.navigator} />

                </ScrollView>

            </View>
        );
    }

}
