'use strict';
import React, { Component } from 'react';
import {
    Text,
    View,
    Image,
    TextInput,
    ScrollView,
    ListView,
    StyleSheet,
    TouchableOpacity,
    TouchableHighlight,
    TouchableWithoutFeedback,
    Alert,
    PanResponder,
    DeviceEventEmitter,
    Animated,
    Platform,
    NativeModules,
    NativeEventEmitter,
    Modal
} from 'react-native';
import g_AppValue from '../../../configs/AppGlobal.js';
import ScrollableTabView from 'react-native-scrollable-tab-view';
import AlbumDetailsTab from '../../../component/tabs/AlbumDetailsTab.js';
import Introduce from '../Introduce/Introduce.js';
import AlbumShows from './AlbumShows.js';
import AlbumNote from '../AlbumNote/AlbumNote.js';
import * as RnNativeModules from '../../../configs/RnNativeModules.js';
import * as ImgUrl from '../../../configs/BaseImgUrl.js';
import Service from '../../../configs/Service.js';
import Util from '../../../common/util.js';
import CachedImage from 'react-native-cached-image';
import NavigationView from '../../../component/Navigator/NavigationView.js';
import Icon from '../../../common/Icon.js';
import VideoView from '../../../component/Video/VideoView.js';
import Pay from '../../Pay/pay.js';
import NoVipDetailsView from '../NoVipDetails.js';
import Loading from '../../../component/Loading/Loading.js';
const tabNames = ['简介', '课程', '评价'];
const HEADER_MAX_HEIGHT = 211 * g_AppValue.precent;
const HEADER_MIN_HEIGHT = 64 * g_AppValue.precent;
const HEADER_SCROLL_DISTANCE = HEADER_MAX_HEIGHT - HEADER_MIN_HEIGHT;
//登陆监听
var LoginEvents = NativeModules.LoginEvent;
const myLoginEvent = new NativeEventEmitter(LoginEvents);
var loginSubscription;
//退出登录成功
var LogoutEvents = NativeModules.LogoutEvent;
const myLogoutEvent = new NativeEventEmitter(LogoutEvents);
var logoutSubscription;
var Bridges = NativeModules.BridgeEvents;
const myEvent = new NativeEventEmitter(Bridges);
var subscription;
export default class AlbumDetails extends Component {
    // 构造函数
    _viewType = 0
    _teacher = [];
    constructor(props) {

        super(props);
        this.state = {
            //控制滑动开关
            scrollEnabled: true,
            scrollY: new Animated.Value(0),
            hideNoVip: false,
            albumDetails: '',
            isPlayingOrPause: 0,
            modalVisible: false,
            noLogin:false,
            isExistPlayedTrace:1,
            isLoading:true,

            //开始高度
        };

    }
    componentDidMount() {
        //console.log('album ID' + this.props.album)
        //获取指定专辑信息
        Service.service.getAlbumById(this.props.album + '')
            .then((data) => {
                //console.log('指定专辑数据' + data)
                var resultData = JSON.parse(data);
                this.setState({ albumDetails: resultData })

            }).catch((err) => {
                // console.log('album数据错误' + err)
            })



    this.subscription = myEvent.addListener('playOrPauseToRN', (reminder) => {
            this.setState({ isPlayingOrPause: reminder.isPlayingOrPause, isExistPlayedTrace : 1})
        }
        );
        Service.loginServer.isPlayingOrPause()
            .then((data) => {
                this.setState({ isPlayingOrPause: data.isPlayingOrPause })
            }).catch((err) => {
                // console.log('错误' + err)
                Util.AppToast('网络出错,请稍后再试')
            })


    }

    componentWillMount() {
        this.subscription && this.subscription.remove();
      RnNativeModules.isExistPlayedTrace()
      .then((data)=>{
        this.setState({isExistPlayedTrace:data})
      })

      this._getUserID();
      this.showNoteTabBar =   DeviceEventEmitter.addListener('showNoteTabBar',(res)=>{
        if (res[0] == 1) {
            RnNativeModules.hideTabBar('hide');
        }else {
          return;
        }


        })
          //登陆成功监听
          this.loginSubscription = myLoginEvent.addListener('LoginSuccess',(reminder)=>{
                this._getUserID();
              });
            this.logoutSubscription = myLogoutEvent.addListener('LogoutSuccess',(reminder)=>{
                //console.log('新注销成功' + reminder.LogoutSuccess )
                    if (reminder.LogoutSuccess) {
                          this._getUserID();

                    }
                  })

              this.loading  =   DeviceEventEmitter.addListener('hideLoading',()=>{
                    this.setState({
                        isLoading:false,
                    })
                  })

                  this.isLoadingTrue = DeviceEventEmitter.addListener('isLoadingTrue',()=>{
                    this.setState({
                        isLoading:true,
                    })
                  })

    }

    _getUserID() {
        RnNativeModules.getUserInfo().then((data) => {
            var resultData = JSON.parse(data);
            if (data == 0 || data == '0') {
              this.setState({
                  noLogin:false,
                  hideNoVip:false,
              })
            } else {
                  this.setState({  noLogin:true,})
                let isVip = Util.isVip(resultData)
                if (isVip == false) {
                  this.setState({
                      hideNoVip: false,
                  })
                }else {
                  this.setState({
                      hideNoVip: true
                  })


                }

            }
        }).catch((err) => {
            // console.log('albunShow获取userID失败' + err)
        })
    }

    // view卸载
    componentWillUnmount() {
        this.loading &&   this.loading.remove();
        this._listtenner2 && this._listtenner2.remove()
        this.modal && this.modal.remove();
        DeviceEventEmitter.emit('showCourseTabBar', '1');
        this.showNoteTabBar &&   this.showNoteTabBar.remove();
          this.subscription &&   this.subscription.remove();
          DeviceEventEmitter.emit('showHomeTabber','1');
    }

    goToQiView(){
        RnNativeModules.goToQiYu();
    }

    goToPayView(){
      RnNativeModules.hideTabBar('hide');
      this.props.navigator.push({
        component: Pay,
      })
    }

    _alertHome(){
      Util.alertDialog({
        msg:'成为友邻学员即可收听此课程',
        oneBtn:'立即入学',
        okBtn:'咨询阿树老师',
        cancelBtn:'取消',
        okFun:()=>{this.goToQiView()},
        oneFun:()=>{this.goToPayView()},
      })
    }
    //播放页面
    _goToPlayerView(is1, is, is2) {
      if (this.state.noLogin == false) {
          Util.AppToast('请先登录');
      }else {
        this.setState({noLogin:true})
        if (this.state.hideNoVip == false) {
            this._alertHome();
        }else {
          RnNativeModules.goToPlayerView(is1,is,is2);
        }
      }
    }
    //返回
    _goBack() {
        RnNativeModules.hideTabBar('show');
        this.props.navigator.pop();
    }



    _playButtonView() {
        this.props.navigator.push({
          component:VideoView,
          params:{
            videoSource:this.state.albumDetails.video_url,
            hideTabBar:0,
          }
        })
    }

    render() {
        var course_count = this.state.albumDetails.course_count;

        return (
            <View style={styles.container}>
              <Loading visible = {this.state.isLoading}/>
                <View style={[styles.naviView, {backgroundColor: '#fff'}]}>
                    <TouchableOpacity  activeOpacity ={1} onPress={this._goBack.bind(this)}>
                        <Image style={styles.leftImage} source={require('../../../imgs/courseBack.png')} />
                    </TouchableOpacity>
                    <TouchableOpacity  activeOpacity ={1}onPress={() => this._goToPlayerView('0', false, '[]')}>
                        <Image style={styles.rightImage} source={this.state.isPlayingOrPause == 0 ? require('../../../imgs/courseplay.png') : require('../../../imgs/coursegit.gif')} />
                    </TouchableOpacity>
                </View>
                <CachedImage defaultSource = {require('../../../imgs/169.png')}  style={styles.HeaderImage} source={{
                    uri: ImgUrl.baseImgUrl + 'album/' + this.props.album + '/cover'
                }}>
                    <View style={[styles.naviView,{  backgroundColor: !this.state.albumDetails.video_url ?  'transparent' : 'rgba(0,0,0,0.2)'}]}>
                        <TouchableOpacity activeOpacity ={1} onPress={this._goBack.bind(this)}>
                            <Image style={styles.leftImage} source={require('../../../imgs/courseBack.png')} />
                        </TouchableOpacity>
                        <TouchableOpacity activeOpacity ={1} onPress={() => this._goToPlayerView('0', false, '[]')}>
                            <Image style={styles.rightImage} source={ this.state.isExistPlayedTrace == 1 ?  this.state.isPlayingOrPause == 0 ? require('../../../imgs/courseplay.png') : require('../../../imgs/coursegit.gif') : null} />
                        </TouchableOpacity>
                    </View>
                    {!this.state.albumDetails.video_url ? null
                        : <View style={styles.headerPalyView}>
                            <TouchableOpacity activeOpacity ={1} onPress={() => { this._playButtonView() }}>
                                <Text style={{marginTop:22* g_AppValue.precent, fontSize: 38 * g_AppValue.precent, fontFamily: 'iconfont', color: '#fff' }}>{Icon.play}</Text>
                            </TouchableOpacity>
                        </View>
                    }

                </CachedImage>
                <ScrollView showsVerticalScrollIndicator={false} scrollEnabled={false} ref='tempScrollView'>
                    <ScrollableTabView initialPage={1} locked={true} renderTabBar={() => <AlbumDetailsTab   tabNames={tabNames} />}>
                        <Introduce tabLabel='简介' hideNoVip={this.state.hideNoVip} album={this.props.album} navigator={this.props.navigator} rowData={this.state.albumDetails} />
                        <AlbumShows tabLabel='节目' hideNoVip={this.state.hideNoVip} rowID={this.props.rowID} albumName={this.props.albumName} navigator={this.props.navigator} course_id={this.props.album} course_count={course_count} is_finished={this.state.albumDetails.is_finished} />
                        <AlbumNote tabLabel='心得' hideNoVip={this.state.hideNoVip} navigator={this.props.navigator} course_id={this.props.album} />

                    </ScrollableTabView>

                </ScrollView>

                {this.state.hideNoVip == false
                    ? <NoVipDetailsView navigator={this.props.navigator}/>
                    : null}

            </View>

        );
    }

}

var styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#f2f5f6'
    },
    HeaderImage: {
        width: g_AppValue.screenWidth,
        marginTop: -64 * g_AppValue.precent,
        height: 211 * g_AppValue.precent,
        backgroundColor: 'black',
        minHeight: 64 * g_AppValue.precent
        //resizeMode:'cover'
    },
    headerPalyView: {
        //marginTop: -64 * g_AppValue.precent,
        width: g_AppValue.screenWidth,
        height: 147 * g_AppValue.precent,
        backgroundColor: "rgba(0,0,0,0.2)",
        // justifyContent: 'center',
        alignItems: 'center',
    },
    naviView: {
        width: g_AppValue.screenWidth,
        height: 64 * g_AppValue.precent,
        flexDirection: 'row',
        justifyContent: 'space-between'
    },
    leftImage: {
        marginTop: 30 * g_AppValue.precent,
        marginLeft: 12 * g_AppValue.precent,
        width: 10 * g_AppValue.precent,
        height: 18 * g_AppValue.precent,



    },
    rightImage: {
        marginTop: 30 * g_AppValue.precent,
        width: 18 * g_AppValue.precent,
        height: 18 * g_AppValue.precent,
        marginRight: 12 * g_AppValue.precent,

    }
})
