//
//  AppDelegate.m
//  ylyk
//
//  Created by 友邻优课 on 2017/2/16.
//  Copyright © 2017年 友邻优课. All rights reserved.
//

#import "AppDelegate.h"
#import "Reachability.h"
#import <React/RCTRootView.h>
#import <React/RCTBundleURLProvider.h>
#import <React/RCTBridge.h>
#import <React/RCTEventDispatcher.h>
#import <React/RCTBridge.h>
#import "YLYKTabBarController.h"
#import "Storage.h"
#import "WXApi.h"
#import "QYSDK.h"
#import "JPUSHService.h"
#import "Growing.h"
#import "Bugout/Bugout.h"
#import "TYDownloadSessionManager.h"
#import "YLYKPlayerManager.h"
#import "YLYKNavigationController.h"
#import <AVFoundation/AVFoundation.h>
#import <CoreTelephony/CTCellularData.h>
#import "IntroduceViewController.h"
#import "NativeNetwork.h"
#import "NSStringTools.h"
#import "CBLProgressHUD.h"
#import "PhoneLoginViewController.h"
#import "BridgeEvents.h"
#import "SplashScreen.h"
// iOS10注册APNs所需头文件
#ifdef NSFoundationVersionNumber_iOS_9_x_Max
#import <UserNotifications/UserNotifications.h>
#endif

@interface AppDelegate () <WXApiDelegate,NSURLSessionDelegate,JPUSHRegisterDelegate,BugoutDelegate>
@property (nonatomic, strong) YLYKPlayerManager *player;
@property (nonatomic, strong) RCTBridge *bridge;
@property (nonatomic, assign) BOOL pausedForAudioSessionInterruption;
@property (nonatomic, strong) Reachability *hostReachability;
@end

@implementation AppDelegate

- (void)receivedCrashNotification:(NSString*)stackTrace
{
//    NSLog(@"%@", stackTrace);
}


#warning 退出登录要注销七鱼
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
//    XXZQLog(@"%@", NSHomeDirectory());
//
    self.allowRotation = NO;
    //    [[Storage sharedInstance] removeAllItems];
    
    [self updateVersion];
    //注册微信的api
    [WXApi registerApp:@"wxf56d7d93bc226f2e"];
    // 注册七鱼的api
    [self setQYSessionController];
    // 注册极光的api
    JPUSHRegisterEntity * entity = [[JPUSHRegisterEntity alloc] init];
    entity.types = JPAuthorizationOptionAlert  |
    JPAuthorizationOptionSound;
    application.applicationIconBadgeNumber = 0;
    [JPUSHService setBadge:0];
    [JPUSHService registerForRemoteNotificationConfig:entity delegate:self];
    [JPUSHService setupWithOption:launchOptions appKey:@"b9318d6e3b95b298f653470f"
                          channel:@"App Store"
                 apsForProduction:nil
            advertisingIdentifier:nil];
    // 注册GrowingIO的API
    [Growing startWithAccountId:@"bcd24b3b296a602f"];
    [Growing setEnableLog:YES];
    [Growing setRnNavigatorPageEnabled:YES];
    // 注册bugout
    BugoutConfig* config = [BugoutConfig defaultConfig];
    config.delegate = self;
    config.enabledShakeFeedback = YES;
    [Bugout init:@"8f62460aa4a70ff2bb7f67b0b1a68707" channel:@"AppStore" config:config];
    [[NSUserDefaults standardUserDefaults] setObject:@"398374a3b6bb1d1238a1e3dd1af6bcf2" forKey:@"app_key"];
    
    
    NSUserDefaults *useDef = [NSUserDefaults standardUserDefaults];
    // 使用 NSUserDefaults 读取用户数据
    if (![useDef boolForKey:@"notFirst"]) {
        // 如果是第一次进入引导页
        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"introduceFirst"];
        _window.rootViewController = [[IntroduceViewController alloc] init];
        
    }
    else{
         [[NSUserDefaults standardUserDefaults] setBool:NO forKey:@"introduceFirst"];
        YLYKTabBarController * tabbar = [[YLYKTabBarController alloc] init];
        YLYKNavigationController * nav = [[YLYKNavigationController alloc] initWithRootViewController:tabbar];
        nav.navigationBarHidden = YES;
        self.window.rootViewController = nav;
        [self.window makeKeyAndVisible];
        [SplashScreen show];
    }
    
    [[TYDownloadSessionManager manager] setBackgroundSessionDownloadCompleteBlock:^NSString *(NSString *downloadUrl) {
        TYDownloadModel *model = [[TYDownloadModel alloc]initWithURLString:downloadUrl];
        return model.filePath;
    }];
    [[TYDownloadSessionManager manager] configureBackroundSession];
    
    AVAudioSession *session = [AVAudioSession sharedInstance];
    [session setActive:YES error:nil];
    [session setCategory:AVAudioSessionCategoryPlayback error:nil];
    [session setActive:YES withOptions:AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation error:nil];
    
    [[UIApplication sharedApplication] beginReceivingRemoteControlEvents];
    [self becomeFirstResponder];
    // 监听其他声音打断信息
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleInterreption:) name:AVAudioSessionInterruptionNotification object:[AVAudioSession sharedInstance]];
    // 监听改变播放线路
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleRouteChange:) name:AVAudioSessionMediaServicesWereLostNotification object:[AVAudioSession sharedInstance]];
    
    self.player = [YLYKPlayerManager sharedPlayer];
    
    // 判断网络状态
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    [self checkNetWorkState];
    
    [self addListenAboutPlayerStatus];
    dispatch_queue_t concurrentQueue = dispatch_queue_create("my.concurrent.queue", DISPATCH_QUEUE_CONCURRENT);
    
    dispatch_async(concurrentQueue, ^(){
        
        if (USERID) {
            [self uploadOffLineListenTime];
        }
    });
    return YES;
}

- (void)checkNetWorkState
{
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(reachabilityChanged:) name:kReachabilityChangedNotification object:nil];
    
    NSString *remoteHostName = @"www.apple.com";
    self.hostReachability = [Reachability reachabilityWithHostName:remoteHostName];
    [self.hostReachability startNotifier];
}

- (void)reachabilityChanged:(NSNotification *)no{
    Reachability* curReach = [no object];
    NSParameterAssert([curReach isKindOfClass: [Reachability class]]);
    NetworkStatus status = [curReach currentReachabilityStatus];
    switch (status)
    {
            
        case NotReachable:
            NSLog(@"====当前网络状态不可达=======");
            break;
        case ReachableViaWiFi:
            NSLog(@"====当前网络状态为Wifi=======");
            [self uploadOffLineListenTime];
            //其他处理
            break;
        case ReachableViaWWAN:
            NSLog(@"====当前网络状态为WWAN=======");
            [self uploadOffLineListenTime];
            break;
        default:
            NSLog(@"");
            break;
    }
}


- (void)addListenAboutPlayerStatus
{
    // 判断是否有上次播放的记录
    NSString *courseId = [[NSUserDefaults standardUserDefaults] objectForKey:@"lastPlayCourseId"];
    // 去接收是否正在播放的通知
    
    if (courseId) {

        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(isPlayingOrPause:) name:@"isPlayingOrPause" object:nil];
    }
}

- (void)isPlayingOrPause:(NSNotification *)sender
{
    BridgeEvents *events = [[BridgeEvents alloc] init];
    [BridgeEvents application:[UIApplication sharedApplication] withPlaying:sender.object];
    [events startObserving];
}


- (void)uploadOffLineListenTime
{
    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] objectForKey:@"offLineCourseDict"];
    
    NSMutableDictionary *mutableDict = [dict mutableCopy];
    
    NSArray *keysArray = [mutableDict allKeys];
    
    if (keysArray.count > 0) {
        NSString *courseIdKeys = keysArray[0];
        NSDictionary *parameters = [dict objectForKey:courseIdKeys];
        NSArray *parametersArray = [parameters allKeys];
        for (NSString *courseId in parametersArray) {
            NSDictionary *uploadTime = [parameters objectForKey:courseId];
            NSArray *array = @[@"course",courseId,@"stat"];
            NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:array,@"url",uploadTime,@"body", nil];
            NSData *data = [NSJSONSerialization dataWithJSONObject:dic options:NSJSONWritingPrettyPrinted error:nil];
            NSString *str = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
            [[NativeNetwork sharedInstance] postWithURLString:str success:^(id responseObject) {
                // 上传成功，移除当前key
                [mutableDict removeObjectForKey:courseIdKeys];
                NSDictionary * offLineDict = [NSDictionary dictionaryWithDictionary:mutableDict];
                [[NSUserDefaults standardUserDefaults] setObject:offLineDict forKey:@"offLineCourseDict"];
                [[NSUserDefaults standardUserDefaults] synchronize];
                // 再次上传
                [self uploadOffLineListenTime];
            } failure:^(NSError *error) {
                
            }];
        }
    }
}

- (void)registerAPNs
{
    
}

- (void)updateVersion
{
    [[NativeNetwork sharedInstance] getSystemVersionsuccess:^(id responseObject) {
        NSDictionary *dict = [NSStringTools getDictionaryWithJsonstring:responseObject];
        NSDictionary *client = [dict objectForKey:@"client"];
        NSDictionary *iosClient = [client objectForKey:@"ios"];
        NSDictionary *latest = [iosClient objectForKey:@"latest"];
        NSString *version = [latest objectForKey:@"version_code"];
        NSString *supportVersionCode = [[iosClient objectForKey:@"support"] objectForKey:@"version_code"];
        NSString *reviewVersionCode = [[iosClient objectForKey:@"review"] objectForKey:@"version_code"];
        NSString *download_url = [latest objectForKey:@"download_url"];
        NSString *description = [latest objectForKey:@"description"];
        [[NSUserDefaults standardUserDefaults] setObject:reviewVersionCode forKey:@"review_version_code"];
        
        NSString *currentLocalVersionCode = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"];
        if([currentLocalVersionCode integerValue] < [supportVersionCode integerValue]) {
            NSLog(@"强制更新");
            // TODO 强制更新，闪退
            NSArray *arr = [NSArray array];
            NSString *str = arr[7];
            
        } else if ([version integerValue]> [currentLocalVersionCode integerValue]) {
            NSLog(@"提示更新");
            NSDictionary *dic = [NSDictionary dictionary];
            [dic setValue:@"dsa" forKey:@"dsad"];
            [self alertViewWithURLString:download_url andDescription:description];
            
        }
    } failure:^(NSError *error) {
        
    }];
}

- (void)alertViewWithURLString:(NSString *)URLString andDescription:(NSString *)description
{
    NSString *regexPattern = @"<br/>";
    NSMutableString *str = [NSMutableString stringWithString:description];
    NSString *pstr = @"\r\n";
    NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:regexPattern options:0 error:nil];
    [regex replaceMatchesInString:str options:0 range:NSMakeRange(0, [str length]) withTemplate:pstr];
    
    UIAlertController *alertVC = [UIAlertController alertControllerWithTitle:@"发现新版本" message:str preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *action1 = [UIAlertAction actionWithTitle:@"立即更新" style:UIAlertActionStyleDefault handler:^(UIAlertAction *_Nonnull action) {
        [[UIApplication sharedApplication]openURL:[NSURL URLWithString:URLString]];
    }];
    
    
    UIAlertAction *cancel = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:^(UIAlertAction *_Nonnull action) {
        
    }];
    [alertVC addAction:cancel];
    [alertVC addAction:action1];
    UIWindow *keyWindow = [[UIApplication sharedApplication] keyWindow];
    UINavigationController * nav = (UINavigationController *)keyWindow.rootViewController;
    [nav presentViewController:alertVC animated:YES completion:nil];
}

- (void)setQYSessionController
{
    [[QYSDK sharedSDK] registerAppId:@"d2638f57cf2a61b584537fbfa91b8f03" appName:@"友邻优课学员"];
    //注册 APNS
    if ([[UIApplication sharedApplication]
         respondsToSelector:@selector(registerForRemoteNotifications)])
    {
        UIUserNotificationType types =UIUserNotificationTypeAlert
        | UIUserNotificationTypeSound | UIUserNotificationTypeBadge;
        UIUserNotificationSettings *settings =
        [UIUserNotificationSettings settingsForTypes:types categories:nil];
        [[UIApplication sharedApplication] registerUserNotificationSettings:settings];
        [[UIApplication sharedApplication] registerForRemoteNotifications];
    }
}

-(void)handleInterreption:(NSNotification *)notification
{
            [[NSNotificationCenter defaultCenter] postNotificationName:@"otherHandleInterreption" object:self userInfo:notification.userInfo];
//    NSDictionary *info = notification.userInfo;
//    AVAudioSessionInterruptionType type = [info[AVAudioSessionInterruptionTypeKey] unsignedIntegerValue];
//    NSInteger seccondReason = [[info objectForKey:@"AVAudioSessionInterruptionOptionKey"] integerValue];
//    XXZQLog(@"qqqqqqqqqq%@",notification.userInfo);
//    [self.player pause];
//    if (type == AVAudioSessionInterruptionTypeBegan) {
//        [self.player pause];
//        
//    } else if(type == AVAudioSessionInterruptionTypeEnded) {
//        if (seccondReason == AVAudioSessionInterruptionOptionShouldResume) {
//            
//            [self.player pause];
//        }
//     
//    }
}

- (void)handleRouteChange:(NSNotification *)notification
{
    NSDictionary *info = notification.userInfo;
    AVAudioSessionRouteChangeReason reason = [info[AVAudioSessionRouteChangeReasonKey] unsignedIntegerValue];
    if (reason == AVAudioSessionRouteChangeReasonOldDeviceUnavailable) {  //旧音频设备断开
        //获取上一线路描述信息
        AVAudioSessionRouteDescription *previousRoute = info[AVAudioSessionRouteChangePreviousRouteKey];
        //获取上一线路的输出设备类型
        AVAudioSessionPortDescription *previousOutput = previousRoute.outputs[0];
        NSString *portType = previousOutput.portType;
        if ([portType isEqualToString:AVAudioSessionPortHeadphones]) {
            //            [self.player pause];
            [self handleInterreptionNotificationPlayOrPause];
        }
    }
}

-(void)onReq:(BaseReq *)req
{
    NSLog(@"dsadsa");
}

- (void)onResp:(BaseResp *)resp
{
    if ([resp isKindOfClass:[SendAuthResp class]]) //判断是否为授权请求，否则与微信支付等功能发生冲突
    {
        NSLog(@"%d",resp.errCode);
        SendAuthResp *aresp = (SendAuthResp *)resp;
        NSDictionary * wechatInfo;
        if (aresp.code == nil) {
            wechatInfo = [NSDictionary dictionaryWithObjectsAndKeys:[NSString stringWithFormat:@"%i",resp.errCode],@"errCode", nil];
        } else {
            wechatInfo = [NSDictionary dictionaryWithObjectsAndKeys:aresp.code,@"code", nil];
        }
        
        [[NSNotificationCenter defaultCenter] postNotificationName:@"wechatLoginNotification" object:self userInfo:wechatInfo];
    }
    
    //    NSString *orderId = [[NSUserDefaults standardUserDefaults] objectForKey:@"order_id"];
    if ([resp isKindOfClass:[PayResp class]]) {
        //        PayResp *response = (PayResp *)resp;
        switch (resp.errCode) {
            case WXSuccess:
                // 在此向服务器查询字符结果
                self.paymentStateBlock(@{@"is_succeed":@true});
                [CBLProgressHUD showTextHUDInWindowWithText:@"支付成功"];
                break;
            case WXErrCodeCommon:
                self.paymentStateBlock(@{@"is_succeed":@false});
                [CBLProgressHUD showTextHUDInWindowWithText:@"支付失败"];
                break;
            case WXErrCodeUserCancel:
                self.paymentStateBlock(@{@"is_succeed":@false});
                [CBLProgressHUD showTextHUDInWindowWithText:@"已取消"];
                break;
            case WXErrCodeSentFail:
                self.paymentStateBlock(@{@"is_succeed":@false});
                [CBLProgressHUD showTextHUDInWindowWithText:@"发送失败"];
                break;
            case WXErrCodeAuthDeny:
                self.paymentStateBlock(@{@"is_succeed":@false});
                [CBLProgressHUD showTextHUDInWindowWithText:@"授权失败"];
                break;
            case WXErrCodeUnsupport:
                self.paymentStateBlock(@{@"is_succeed":@false});
                [CBLProgressHUD showTextHUDInWindowWithText:@"微信不支持"];
                break;
        }
    }
}


- (void)applicationWillResignActive:(UIApplication *)application {
    [[AVAudioSession sharedInstance] setActive:YES error:nil];
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
}


- (void)applicationDidEnterBackground:(UIApplication *)application {
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
    NSInteger count = [[[QYSDK sharedSDK] conversationManager] allUnreadCount];
    [[UIApplication sharedApplication] setApplicationIconBadgeNumber:count];
}


- (void)applicationWillEnterForeground:(UIApplication *)application {
    // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
}


- (void)applicationDidBecomeActive:(UIApplication *)application {
    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
}


- (void)applicationWillTerminate:(UIApplication *)application {
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}

- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{
    if ([Growing handleUrl:url])
    {
        return YES;
    }
    
    return [WXApi handleOpenURL:url delegate:self];
}

- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url
{
    [Growing handleUrl:url];
    return [WXApi handleOpenURL:url delegate:self];
}

- (void)application:(UIApplication *)application handleEventsForBackgroundURLSession:(NSString *)identifier completionHandler:(void (^)())completionHandler
{
    [TYDownloadSessionManager manager].backgroundSessionCompletionHandler = completionHandler;
}
- (void)remoteControlReceivedWithEvent:(UIEvent *)event {
    // MusicPlugin
    switch (event.subtype)    {
        case UIEventSubtypeRemoteControlPlay:
//            [self.player play];
            [self remoteControllerNotificationWithStatus:@"play"];
            break;
        case UIEventSubtypeRemoteControlPause:
//            [self.player pause];
            [self remoteControllerNotificationWithStatus:@"pause"];
            break;
        case UIEventSubtypeRemoteControlPreviousTrack:
            [self remoteControllerNotificationWithStatus:@"previous"];
            break;
        case UIEventSubtypeRemoteControlNextTrack:
            [self remoteControllerNotificationWithStatus:@"next"];
            break;
        case UIEventSubtypeRemoteControlTogglePlayPause:
            //            [self.player isPlaying] ? [self.player pause] : [self.player play];
            [self sendNotificationPlayOrPause];
            break;
    }
}

- (void)remoteControllerNotificationWithStatus:(NSString *)str
{
    NSNotification * noti11 = [NSNotification notificationWithName:@"remoteControllerNotification" object:nil userInfo:@{@"playStatus":str}];
    [[NSNotificationCenter defaultCenter] postNotification:noti11];
}


- (void)sendNotificationPlayOrPause
{
    NSNotification * noti11 = [NSNotification notificationWithName:@"playerStatusChange" object:nil userInfo:nil];
    [[NSNotificationCenter defaultCenter] postNotification:noti11];
}

- (void)handleInterreptionNotificationPlayOrPause
{
    NSNotification * noti11 = [NSNotification notificationWithName:@"handleInterreption" object:nil userInfo:nil];
    [[NSNotificationCenter defaultCenter] postNotification:noti11];
}


- (BOOL)canBecomeFirstResponder {
    return YES;
}

- (UIInterfaceOrientationMask)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window
{
    if (self.allowRotation) {
        return UIInterfaceOrientationMaskAll;
    }
    return UIInterfaceOrientationMaskPortrait;
}

- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
    [JPUSHService registerDeviceToken:deviceToken];
    [[QYSDK sharedSDK] updateApnsToken:deviceToken];
}

- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(NSInteger))completionHandler {
    // Required
    NSDictionary * userInfo = notification.request.content.userInfo;
    if([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {
        [JPUSHService handleRemoteNotification:userInfo];
    }
    completionHandler(UNNotificationPresentationOptionAlert); // 需要执行这个方法，选择是否提醒用户，有Badge、Sound、Alert三种类型可以选择设置
}



// iOS 10 Support
- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)())completionHandler {
    // Required
    NSDictionary * userInfo = response.notification.request.content.userInfo;
    if([response.notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {
        [JPUSHService handleRemoteNotification:userInfo];
    }
    completionHandler();  // 系统要求执行这个方法
}

- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {
    
    // Required, iOS 7 Support
    [JPUSHService handleRemoteNotification:userInfo];
    completionHandler(UIBackgroundFetchResultNewData);
}

- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {
    
    // Required,For systems with less than or equal to iOS6
    [JPUSHService handleRemoteNotification:userInfo];
    [[QYSDK sharedSDK] registerPushMessageNotification:^(QYPushMessage *message) {
        XXZQLog(@"%@",message);
    }];
}



@end
