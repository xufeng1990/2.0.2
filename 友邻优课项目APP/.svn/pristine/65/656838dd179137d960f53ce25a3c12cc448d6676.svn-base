//  introduce
//  功能: TODO 该类的作用
//  Created by 刘云强 on  2016-10-20
//  Copyright © 2017年  琢磨科技.

'use strict';
import React, {Component} from 'react';
import {
    Text,
    View,
    Image,
    TextInput,
    ScrollView,
    ListView,
    StyleSheet,
    TouchableOpacity,
    TouchableHighlight,
    TouchableWithoutFeedback,
    Alert,
    DeviceEventEmitter,
    Platform,
      InteractionManager,
} from 'react-native';
import g_AppValue from '../../../configs/AppGlobal.js';
import IntroduceHeaderCell from '../../../component/AlbumCell/IntroduceHeaderCell.js';
import TeacherIntroduce from './TeacherIntroduce.js';
import Service from '../../../configs/Service.js';
import * as ImgUrl from '../../../configs/BaseImgUrl.js';
import NoVipDetailsView from '../NoVipDetails.js';
import Loading from '../../../component/Loading/Loading.js';
import  HTMLView from 'react-native-htmlview';
import BlankPages from '../../../component/AlbumCell/BlankPages.js';
export default class Introduce extends Component {
    // 构造函数
    _alldata = [];
    _teacher = [];
    constructor(props) {
        super(props);
        this.state = {
            teacherData: '',
           isLoading: true
        };
    }

    componentWillMount(){
      if (g_AppValue.isConnected == false) {
        this.setState({isLoading:false})
      }
    }
    // 加载完成
    componentDidMount() {
        Service.service.getAlbumById(this.props.album + '').then((data) => {
            console.log('指定专辑数据qqqq' + data)
            var resultData = JSON.parse(data);
            this.setState({teacherData: resultData, isLoading: false})

        }).catch((err) => {
            console.log('album数据错误' + err)
              this.setState({teacherData: resultData, isLoading: false})
        })
    }

    // view卸载
    componentWillUnmount() {
        //
    }

    _goToTeacherPage() {

        return (this.props.navigator.push({component: TeacherIntroduce}));

    }
    _rowRow(item) {

        return (

            <View style={styles.teachersImageRowView}>
                <Image style={styles.teachersHeaderImage} source={{
                    uri: ImgUrl.baseImgUrl + 'teacher/' + item.id + '/avatar'
                }}/>
                <View style={styles.teachersNameView}>
                    <Text style={styles.teachersNameText}>{item.name}</Text>
                    <Text style={styles.teachersIntroduceText} numberOfLines={2}>{item.desc}</Text>
                </View>
            </View>

        );
    }
    // render
    render() {

        if (!this.state.teacherData) {

            return  <Loading visible = {this.state.isLoading} />;
        }else {
                
                  var htmlContent = this.state.teacherData.intro;
          //{this.state.teacherData.intro.replace(/<br \/>/g, '\n')}
                  return (

                      <View style={styles.container}>
                      {g_AppValue.isConnected ? <ScrollView>
                                  <View style={styles.speakerTeachersView}>
                                      <IntroduceHeaderCell titleName='主讲大咖' titleNameTwo='T e a c h e r'/>

                                      <View style={styles.teachersImageView}>
                                          {this.state.teacherData.teachers.map((item, i) => this._rowRow(item, i))}
                                      </View>
                                  </View>
                                  <View style={styles.albunIntroduceView}>
                                      <IntroduceHeaderCell titleName='专辑介绍' titleNameTwo='I n t r o d u c e'/>
                                      <View style={styles.contentText}>
                                      <HTMLView value = {htmlContent} stylesheet={styles}/>
                                      </View>
                                  </View>
                              </ScrollView>
                            : <BlankPages ImageUrl={require('../../../imgs/none.png')}  contentText='无法连接到服务器,请检查你的网络设置'/>}


                                            {this.props.hideNoVip == false
                                                ? <NoVipDetailsView navigator={this.props.navigator}/>
                                                : null}
                                        </View>
                                    );
        }


    }


}

var styles = StyleSheet.create({
  p:{
    margin:0,
    padding:0,
    lineHeight:0,
  //  color:'red',
  },
    container: {
        height: Platform.OS == 'ios'
            ? 410 * g_AppValue.precent
            : 390 * g_AppValue.precent,
        backgroundColor: '#f2f5f6'
    },
    speakerTeachersView: {
        marginTop: 10 * g_AppValue.precent,
        width: g_AppValue.screenWidth,
        backgroundColor: '#ffffff'
    },

    teachersImageView: {
        width: g_AppValue.screenWidth,
        //height:145 * g_AppValue.precent,
        backgroundColor: '#ffffff',
        justifyContent: 'center',
        marginBottom: 20 * g_AppValue.precent
    },

    ContainerStyle: {
        justifyContent: 'space-around',
        flexDirection: 'row'
    },
    teachersImageRowView: {
        width: g_AppValue.screenWidth,
        height: 80 * g_AppValue.precent,
        //  backgroundColor:'green',
        alignItems: 'center',
        flexDirection: 'row'
    },
    teachersHeaderImage: {
        width: 60 * g_AppValue.precent,
        height: 60 * g_AppValue.precent,
        borderRadius: 30 * g_AppValue.precent,
        // marginTop:10 * g_AppValue.precent,
        marginLeft: 20 * g_AppValue.precent
    },
    teachersNameView: {
        width: 250 * g_AppValue.precent,
        height: 60 * g_AppValue.precent,
        //backgroundColor:'red',
        marginLeft: 20 * g_AppValue.precent
    },
    teachersNameText: {
        marginTop: 10 * g_AppValue.precent,
        fontSize: 14 * g_AppValue.precent,
        color: '#5a5a5a'
    },
    teachersIntroduceText: {
        marginTop: 13 * g_AppValue.precent,
        fontSize: 11 * g_AppValue.precent,
        color: '#9a9b9c'
    },
    albunIntroduceView: {
        width: g_AppValue.screenWidth,
        backgroundColor: '#ffffff',
        marginTop: 10 * g_AppValue.precent
    },
    contentText: {
        width: 335 * g_AppValue.precent,
        marginTop: 18 * g_AppValue.precent,
        marginLeft: 20 * g_AppValue.precent,
        marginBottom: 20 * g_AppValue.precent,
        fontSize: 14 * g_AppValue.precent,
        color: '#5a5a5a'
    }
})
