//  AlbumNote
//  功能: TODO 该类的作用
//  Created by 刘云强 on  2016-10-20
//  Copyright © 2017年  琢磨科技.

'use strict';
import React, { Component, PropTypes } from 'react';
import {
    Text,
    View,
    Image,
    TextInput,
    ScrollView,
    ListView,
    StyleSheet,
    TouchableOpacity,
    TouchableHighlight,
    TouchableWithoutFeedback,
    Alert,
    NativeModules,
    Modal
} from 'react-native';
import g_AppValue from '../../configs/AppGlobal.js';
import ImageZoom from 'react-native-image-pan-zoom';
import Util from '../../common/util.js';
import Icon from '../../common/Icon.js';
import * as RnNativeModules from '../../configs/RnNativeModules.js';
import Service from '../../configs/Service.js';
export default class ANoteCell extends Component {
    // 构造函数
    constructor(props) {
        super(props);
        this.focus = true;
        this.modalImageVisible = false;
        this.saveImageModalVisible = false;
        this.state = {
            focusChange: true,
            modalVisible: false,
            transparent: false,
            saveModalVisible: false,
            isShow: true,
            //点赞
            noteId: this.props.noteId,
            thumbNumber: this.props.thumbNumber,
            //点赞次数判断
            isLiked: this.props.is_liked
        };
    }
    static defaultProps = {
        name: 'name', //标题
        cellBackgrondColor: '#ffffff',
        actionFnc() {
        },
        focusChange() {
        },
        foucsActionFnc() {
        },
        touchImage() {
        },
        imageSourceFunc() {
        },
        noteTouchInage() {
        },
        palyAction() {
        },
        thumActionFnc() {
        },
        headerImageAction() {
        }
    }
    static propTypes = {
        name: PropTypes.string,
        headPortraitImage: PropTypes.object,
        time: PropTypes.string,
        focusChange: PropTypes.func,
        focusChangeImage: PropTypes.number,
        content: PropTypes.string,
        cellBackgrondColor: PropTypes.string,
        thumActionFnc: PropTypes.func,
        imagesArray: PropTypes.array,
        touchImage: PropTypes.func,
        playImage: PropTypes.object,
        playTitle: PropTypes.string,
        playName: PropTypes.string,
        thumbNumber: PropTypes.number,
        imagesData: PropTypes.array,
        noteTouchImage: PropTypes.func,
        palyAction: PropTypes.func,
        numberOfLines: PropTypes.number,
        headerImageAction: PropTypes.func,
        isMe: PropTypes.string
    }
    _renderItem(item, i) {
        return (
            <TouchableOpacity style={styles.imageItem} onPress={() => { this._showModal() }}>
                <Image style={styles.imageItem} source={{ uri: item }} />
            </TouchableOpacity>
        );
    }
    render() {
        return (
            <View style={[
                styles.container, this.state.isShow ? {} : { height: 0 }]}>
                <Image style={styles.HeadPortraitImage} source={this.props.headPortraitImage} />
                <View style={styles.rightBigView}>
                    <TouchableOpacity onPress={this.props.foucsActionFnc}>
                        <Image style={styles.FocusImage} source={this.props.focusChangeImage} />
                    </TouchableOpacity>
                    <Text style={styles.nameText}>{this.props.name}</Text>
                    {this.props.hidetime == 1 ? null : <Text style={styles.timeText}>{this.props.time}</Text>}
                    <View
                        style={{ width: 295 * g_AppValue.precent, marginTop: 8 * g_AppValue.precent, marginBottom: this.props.content == '' ? - 10 * g_AppValue.precent : 10 * g_AppValue.precent }}>
                        <Text style={styles.contentText}
                            numberOfLines={this.props.numberOfLines}>{this.props.content}</Text>
                    </View>
                </View>
            </View>
        );
    }
}
var styles = StyleSheet.create({
    listView: {
        flex: 1,
        backgroundColor: '#f2f5f6'
    },
    container: {
        flex: 1,
        width: g_AppValue.screenWidth,
        backgroundColor: '#ffffff',
        marginTop: 10 * g_AppValue.precent,
        flexDirection: 'row'
    },
    HeadPortraitImage: {
        width: 39 * g_AppValue.precent,
        height: 39 * g_AppValue.precent,
        marginTop: 12 * g_AppValue.precent,
        marginLeft: 12 * g_AppValue.precent,
        borderRadius: 19.5 * g_AppValue.precent
    },
    FocusImage: {
        width: 54 * g_AppValue.precent,
        height: 21 * g_AppValue.precent,
        position: 'absolute',
        top: 0 * g_AppValue.precent,
        right: 12 * g_AppValue.precent
    },
    rightBigView: {
        flex: 1,
        width: 295 * g_AppValue.precent,
        //  backgroundColor:'green',
        marginTop: 17 * g_AppValue.precent,
        marginLeft: 10 * g_AppValue.precent
    },
    nameText: {
        width: 200 * g_AppValue.precent,
        fontSize: 14 * g_AppValue.precent,
        color: '#5a5a5a',
        textAlign: 'left'
    },
    timeText: {
        width: 200 * g_AppValue.precent,
        marginTop: 5 * g_AppValue.precent,
        fontSize: 11 * g_AppValue.precent,
        color: '#9a9b9c',
        textAlign: 'left'
    },
    contentText: {
        //width:295 * g_AppValue.precent,
        //marginTop:8 * g_AppValue.precent,
        fontSize: 13 * g_AppValue.precent,
        color: '#5a5a5a',
        textAlign: 'left',
        //  backgroundColor:'yellow',
        //  marginBottom:10* g_AppValue.precent,
    },
    ImageView: {
        width: 294 * g_AppValue.precent,
        marginLeft: -20 * g_AppValue.precent,
        flexWrap: 'wrap',
        flexDirection: 'row',
        //  backgroundColor:'red',
    },
    imageItem: {
        width: 88 * g_AppValue.precent,
        height: 88 * g_AppValue.precent,
        marginBottom: 10 * g_AppValue.precent,
        marginLeft: 10 * g_AppValue.precent
    },
    payView: {
        //marginTop:20 * g_AppValue.precent,
        width: 284 * g_AppValue.precent,
        height: 48 * g_AppValue.precent,
        flexDirection: 'row'
    },
    payImageOne: {
        width: 64 * g_AppValue.precent,
        height: 48 * g_AppValue.precent
    },
    payImageTwo: {

        width: 64 * g_AppValue.precent,
        height: 48 * g_AppValue.precent
    },
    payRightView: {
        marginLeft: 10 * g_AppValue.precent,
        width: 210 * g_AppValue.precent,
        height: 48 * g_AppValue.precent
    },
    payRightTitleText: {
        marginTop: 8 * g_AppValue.precent,
        fontSize: 13 * g_AppValue.precent,
        color: '#5a5a5a',
        textAlign: 'left'
    },
    payRightNameText: {
        marginTop: 4 * g_AppValue.precent,
        fontSize: 12 * g_AppValue.precent,
        color: '#5a5a5a',
        textAlign: 'left'
    },
    ThumbView: {
        flex: 1,
        height: 16 * g_AppValue.precent,
        marginTop: 15 * g_AppValue.precent,
        marginBottom: 14 * g_AppValue.precent,
        marginRight: 12 * g_AppValue.precent,
        justifyContent: 'flex-end',
        flexDirection: 'row'
    },
    thumbImage: {
        width: 16 * g_AppValue.precent,
        height: 16 * g_AppValue.precent,
        marginRight: 6 * g_AppValue.precent
    },
    thumbText: {
        fontSize: 14 * g_AppValue.precent,
        color: '#9a9b9c',
        textAlign: 'right'
    },
    saveImageView: {
        position: 'absolute',
        bottom: 0,
        width: g_AppValue.screenWidth,
        height: 120 * g_AppValue.precent,
        backgroundColor: '#f2f5f6',
        // opacity:0.3,
    },
    saveView: {
        width: g_AppValue.screenWidth,
        height: 55 * g_AppValue.precent,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#ffffff'
    },
    deleteTextAction: {
        position: 'absolute',
        top: 5 * g_AppValue.precent,
        left: 0 * g_AppValue.precent,
        marginBottom: 14 * g_AppValue.precent
    },
    deleteText: {
        fontSize: 11 * g_AppValue.precent,
        color: '#9a9b9c'
    }
})
