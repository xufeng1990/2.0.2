package com.reactutils.userinfo;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import android.widget.Toast;

import com.alipay.PayResult;
import com.alipay.sdk.app.PayTask;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableMap;
import com.google.gson.Gson;
import com.reactutils.callback.BaseStringCallback;
import com.tencent.mm.sdk.modelpay.PayReq;
import com.zhuomogroup.ylyk.MainApplication;
import com.zhuomogroup.ylyk.base.YLBaseUrl;
import com.zhuomogroup.ylyk.bean.RequestBean;
import com.zhuomogroup.ylyk.network.Signature;
import com.zhy.http.okhttp.OkHttpUtils;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.Map;

import okhttp3.Call;

import static com.alipay.AliPayCodeBase.ALI_PAY_DOUBLE;
import static com.alipay.AliPayCodeBase.ALI_PAY_ERROR;
import static com.alipay.AliPayCodeBase.ALI_PAY_NET_ERROR;
import static com.alipay.AliPayCodeBase.ALI_PAY_NULL;
import static com.alipay.AliPayCodeBase.ALI_PAY_OTHER;
import static com.alipay.AliPayCodeBase.ALI_PAY_USER_CANCEL;
import static com.alipay.AliPayCodeBase.ALI_PAY_WAIT;
import static com.alipay.AliPayCodeBase.ALI_PAY_WIN;
import static com.reactutils.userinfo.YLBridgeNativeModule.setPromise;
import static com.zhuomogroup.ylyk.base.YLUrlSetting.JSON_MEDIA_TYPE;

/**
 * Created by xyb on 2017/4/19.
 */

public class YLPayModule extends ReactContextBaseJavaModule {

    private static final int SDK_PAY_FLAG = 1;
    private final Context mContext;
    private String order_string;
    private Handler mHandler;

    public YLPayModule(ReactApplicationContext reactContext) {
        super(reactContext);
        mContext = reactContext.getApplicationContext();
    }

    @Override
    public String getName() {
        return null;
    }

    /**
     * 去微信支付方法
     *
     * @param readableMap
     * @param promise
     */
    @ReactMethod
    public void goToPay(ReadableMap readableMap, Promise promise) {
        setPromise(promise);
        String id = readableMap.getString("goods_id");
        String count = readableMap.getString("count");
        String chanel = readableMap.getString("channel");
        JSONObject object = new JSONObject();
        try {
            object.put("goods_id", id);
            object.put("channel", chanel);
            object.put("count", count);
            OkHttpUtils.postString()
                    .headers(Signature.UrlHeaders(mContext))
                    .url(YLBaseUrl.BASE_URL_HEAD + "order" + Signature.UrlSignature())
                    .content(object.toString())
                    .mediaType(JSON_MEDIA_TYPE)
                    .build().execute(new BaseStringCallback() {
                @Override
                public void onError(Call call, Exception e, int id) {

                }

                @Override
                public void onResponse(String response, int id) {
                    try {
                        Gson gson = new Gson();
                        RequestBean requestBean = gson.fromJson(response, RequestBean.class);
                        if (requestBean.isResult()) {
                            response = requestBean.getResponse();
                            JSONObject object1 = new JSONObject(response);
                            boolean result = object1.getBoolean("result");
                            JSONObject aPackage = object1.getJSONObject("package");
                            if (result) {

                                JSONObject payment = aPackage.getJSONObject("payment");
                                sendMsg(payment);
                            } else {
                                String message = aPackage.getString("message");
                                Toast.makeText(mContext, message, Toast.LENGTH_SHORT).show();
                            }

                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            });
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    public void sendMsg(JSONObject json) throws JSONException {
        PayReq req = new PayReq();
        req.appId = json.getString("app_id");
        req.partnerId = json.getString("partner_id");
        req.prepayId = json.getString("prepay_id");
        req.nonceStr = json.getString("nonce_str");
        req.timeStamp = json.getString("timestamp");
        req.packageValue = json.getString("package");
        req.sign = json.getString("sign");
        req.extData = "app data"; // optional
        if (getCurrentActivity() != null) {
            // 在支付之前，如果应用没有注册到微信，应该先调用IWXMsg.registerApp将应用注册到微信
            MainApplication application = (MainApplication) getCurrentActivity().getApplication();
            application.getIwxapi().sendReq(req);
        }
    }

    /**
     * 支付宝支付方法
     *
     * @param readableMap
     * @param promise
     */
    @ReactMethod
    public void goToPayALI(ReadableMap readableMap, final Promise promise) {
        String id = readableMap.getString("goods_id");
        String count = readableMap.getString("count");
        String chanel = readableMap.getString("channel");
        JSONObject object = new JSONObject();
        try {
            object.put("goods_id", id);
            object.put("channel", chanel);
            object.put("count", count);
            OkHttpUtils.postString()
                    .headers(Signature.UrlHeaders(mContext))
                    .url(YLBaseUrl.BASE_URL_HEAD + "order" + Signature.UrlSignature())
                    .content(object.toString())
                    .mediaType(JSON_MEDIA_TYPE)
                    .build().execute(new BaseStringCallback() {
                @Override
                public void onError(Call call, Exception e, int id) {

                }

                @Override
                public void onResponse(String response, int id) {
                    if (getCurrentActivity() != null) {
                        try {

                            Gson gson = new Gson();
                            RequestBean requestBean = gson.fromJson(response, RequestBean.class);
                            if (requestBean.isResult()) {
                                response = requestBean.getResponse();
                                JSONObject object1 = new JSONObject(response);
                                boolean result = object1.getBoolean("result");
                                JSONObject aPackage = object1.getJSONObject("package");
                                if (result) {
                                    JSONObject payment = aPackage.getJSONObject("payment");
                                    order_string = payment.getString("order_string");
                                    getCurrentActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            AliPayThread aliPayThread = new AliPayThread();
                                            aliPayThread.start();
                                            mHandler = new Handler(new Handler.Callback() {
                                                @Override
                                                public boolean handleMessage(Message msg) {
                                                    PayResult result = new PayResult((Map<String, String>) msg.obj);
                                                    boolean isPay = false;
                                                    switch (result.getResultStatus()) {
                                                        case ALI_PAY_WIN:
                                                            isPay = true;
                                                            break;
                                                        case ALI_PAY_WAIT:
                                                            isPay = false;
                                                            break;
                                                        case ALI_PAY_ERROR:
                                                            isPay = false;
                                                            break;
                                                        case ALI_PAY_DOUBLE:
                                                            isPay = false;
                                                            break;
                                                        case ALI_PAY_USER_CANCEL:
                                                            isPay = false;
                                                            break;
                                                        case ALI_PAY_NET_ERROR:
                                                            isPay = false;
                                                            break;
                                                        case ALI_PAY_NULL:
                                                            isPay = false;
                                                            break;
                                                        case ALI_PAY_OTHER:
                                                            isPay = false;
                                                            break;
                                                    }

                                                    WritableMap map = Arguments.createMap();
                                                    map.putBoolean("is_succeed", isPay);
                                                    promise.resolve(map);
                                                    return false;
                                                }
                                            });
                                        }
                                    });

                                } else {
                                    String message = aPackage.getString("message");
                                    Toast.makeText(mContext, message, Toast.LENGTH_SHORT).show();
                                }

                            }

                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }

                }
            });
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    /**
     * 支付宝支付异步任务
     *
     * @author Simon
     */
    private class AliPayThread extends Thread {


        @Override
        public void run() {
            PayTask alipay = new PayTask(getCurrentActivity());
            Map<String, String> result = alipay.payV2(order_string, true);
            Message msg = new Message();
            msg.what = SDK_PAY_FLAG;
            msg.obj = result;
            mHandler.sendMessage(msg);
        }
    }
}
