//  AlbumShows
//  功能: TODO 该类的作用
//  Created by 刘云强 on  2016-10-20
//  Copyright © 2017年  琢磨科技.

'use strict';
import React, { Component } from 'react';
import {
    Text,
    View,
    Image,
    TextInput,
    ScrollView,
    ListView,
    StyleSheet,
    TouchableOpacity,
    TouchableHighlight,
    TouchableWithoutFeedback,
    Alert,
    NativeModules,
    PanResponder,
    DeviceEventEmitter,
    Platform,
      InteractionManager,
      NativeEventEmitter,
} from 'react-native';
//下拉刷新
import UltimateListView from "react-native-ultimate-listview";
import g_AppValue from '../../../configs/AppGlobal.js';
import Arrangement from '../../../component/AlbumCell/Arrangement.js';
import AlbumShowsCell from './AlbumShowsCell.js';
import * as RnNativeModules from '../../../configs/RnNativeModules.js';
import BlankPages from '../../../component/AlbumCell/BlankPages.js';
import Service from '../../../configs/Service.js';
import Util from '../../../common/util.js';
import NoVipDetailsView from '../NoVipDetails.js';
import Loading from '../../../component/Loading/Loading.js';
var CACHE_KEY = "__CACHE_HOME_4_COURSESHOW";
const CourseList = NativeModules.NativeNetwork;

var LoginEvents = NativeModules.LoginEvent;
const myLoginEvent = new NativeEventEmitter(LoginEvents);
var loginSubscription;

//退出登录成功
var LogoutEvents = NativeModules.LogoutEvent;
const myLogoutEvent = new NativeEventEmitter(LogoutEvents);
var logoutSubscription;

export default class AlbumShows extends Component {
    // 构造函数
    _limit = 10;


    _dataSource = new ListView.DataSource({
        rowHasChanged: (row1, row2) => row1 !== row2
    })
    //全部数据
    _alldata = [];
    //听过数组
    _listened = [];
    constructor(props) {

        super(props);
        this.state = {
            course_idList: [],
            dataSource: this._dataSource.cloneWithRows(this._alldata),
            isShowLoadMore: false,
            is_listened: this._listened,
            sorting: this.props.is_finished,
            isLoading: true,
        };
        this.changSorting = this.changSorting.bind(this);
    }


    componentWillMount() {
      if (g_AppValue.isConnected == false) {
        DeviceEventEmitter.emit('hideLoading','1');
      }
        let that = this;
          InteractionManager.runAfterInteractions(()=>{
        Service.storage.getItem(CACHE_KEY + this.props.course_id + '').then(function (data) {
            that._alldata = JSON.parse(data);
            //console.log('getDtat' + that._alldata)
            that.setState({
                dataSource: that._dataSource.cloneWithRows(that._alldata),

            });
              DeviceEventEmitter.emit('hideLoading','1');
        });
      })

        loginSubscription = myLoginEvent.addListener('LoginSuccess',(reminder)=>{
              //console.log(reminder.LoginSuccess + "loginsuccess");
              this._getCourseList();
            });


            logoutSubscription = myLogoutEvent.addListener('LogoutSuccess',(reminder)=>{
              //console.log('新注销成功' + reminder.LogoutSuccess )
                  if (reminder.LogoutSuccess) {
                        this._getCourseList();
                  }
                })

    }

    changSorting() { }

    // 加载完成
    componentDidMount() {

        //  console.log("字符串拼接" + CACHE_KEY+this.props.course_id+'' )

        let that = this;
        this._changSorting = DeviceEventEmitter.addListener('changSorting', (finished) => {

            this.setState({
                sorting: !this.state.sorting
            }, function () {
              this.refs.listView && this.refs.listView.refresh();
            });
        })


        // this._onListRefersh();
    }



    // view卸载
    componentWillUnmount() {
      this.loginSubscription && this.loginSubscription.remove();
      this.logoutSubscription && this.logoutSubscription.remove();
    }

    _rowRow(rowData, sectionID, rowID) {


        return <AlbumShowsCell rowID={rowID} listened={this.state.is_listened[rowID]} data={rowData} navigator={this.props.navigator}  albumId={this.props.course_id}  />
    }

    _renderHeader() {

        return <Arrangement rowID={this.props.rowID} is_finished={this.props.is_finished} course_count={this.props.course_count} albumName = {this.props.albumName} albumId={this.props.course_id} navigator={this.props.navigator} />

    }


    //    <Loading  visible ={this.state.isLoading} />
    // renderxx
    render() {

        return (

            <View style={{
                backgroundColor: '#f2f5f6',
                height: Platform.OS == 'ios'? (this.props.hideNoVip == false ? 365* g_AppValue.precent : 410 * g_AppValue.precent) : (this.props.hideNoVip == false ? 340* g_AppValue.precent :  390 * g_AppValue.precent)
            }}>

              {
                  g_AppValue.isConnected ?<UltimateListView
                       ref= 'listView'
                       onFetch={this._onListRefersh.bind(this)}
                       enableEmptySections
                       headerView={this._renderHeader.bind(this)}
                       //----Normal Mode----
                       separator={false}
                       rowView={this._rowRow.bind(this)}
                       refreshableTitleWillRefresh="下拉刷新..."
                       refreshableTitleInRefreshing="下拉刷新..."
                       refreshableTitleDidRefresh="Finished"
                       refreshableTitleDidRefreshDuration={10000}
                       allLoadedText=''
                       waitingSpinnerText=''
                   />
                :  <BlankPages ImageUrl={require('../../../imgs/none.png')}  contentText='无法连接到服务器,请检查你的网络设置'/>
              }



            </View>

        );
    }
//  {this.props.hideNoVip == false ? <NoVipDetailsView navigator={this.props.navigator} /> : null}
    _getCourseList(page, callback, options) {
        const pageLimit = 10;
        let that = this;

          InteractionManager.runAfterInteractions(()=>{
        Service.service.getCourseList({
            'page': page,
            'limit': pageLimit,
            'album_id': this.props.course_id + '',
            'sorting': this.state.sorting
                ? 'asc'
                : 'desc'
        }).then((data) => {
          //console.log('数据长度'+data);
            if (page <= 1) {
                that._alldata = [];
            }

            data = JSON.parse(data);
               var con =  data.length;


            for (let i = 0; i < data.length; i++) {
                this._alldata.push(data[i]);
                this._listened.push(data[i].is_listened);
            }
            this.setState({
                dataSource: this._dataSource.cloneWithRows(this._alldata),
                is_listened: this._listened,
                isLoading:false,

            });
            Service.storage.setItem(CACHE_KEY + this.props.course_id + '', JSON.stringify(this._alldata));





            options.pageLimit = pageLimit;

            callback(data, options);
        }).catch((err) => {
            // that.refs.listView && that.refs.listView.endLoadMore();
          DeviceEventEmitter.emit('hideLoading','1');

            console.warn('load failed: ', err);
        });
      })
    }

    _onListRefersh(page = 1, callback, options) {
        this._getCourseList(page , callback, options);
    }

}
var styles = StyleSheet.create({
    listView: {
        backgroundColor: '#f2f5f6'
    },

})
