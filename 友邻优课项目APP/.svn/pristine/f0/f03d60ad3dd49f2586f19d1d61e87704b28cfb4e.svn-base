package com.zhuomogroup.ylyk.activity;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.support.v7.app.AlertDialog;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import com.google.gson.Gson;
import com.reactutils.callback.BaseStringCallback;
import com.reactutils.controller.IntentModule;
import com.reactutils.encryption.EncryptionTools;
import com.reactutils.userinfo.BridgeNativeModule;
import com.zhuomogroup.ylyk.MainApplication;
import com.zhuomogroup.ylyk.R;
import com.zhuomogroup.ylyk.base.YLBaseActivity;
import com.zhuomogroup.ylyk.bean.RequestBean;
import com.zhuomogroup.ylyk.network.Signature;
import com.zhuomogroup.ylyk.utils.SPUtils;
import com.zhuomogroup.ylyk.utils.Utils;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.StringCallback;

import org.greenrobot.eventbus.EventBus;
import org.json.JSONException;
import org.json.JSONObject;

import okhttp3.Call;
import okhttp3.MediaType;

import static com.zhuomogroup.ylyk.base.YLBaseUrl.BASE_APP_KEY;
import static com.zhuomogroup.ylyk.base.YLBaseUrl.BASE_URL_HEAD;
import static com.zhuomogroup.ylyk.base.YLBaseUrl.USERID_Authorization;
import static com.zhuomogroup.ylyk.base.YLBaseUrl.USER_INFO;

public class YLTelephoneLoginActivity extends YLBaseActivity implements View.OnClickListener, View.OnFocusChangeListener, TextWatcher {

    RelativeLayout window;
    EditText telephone, password;
    TextView code_text, login_button;
    ImageView back_img;
    private boolean tag = true;
    private int i = 120;

    @Override
    public int bindLayout() {
        return R.layout.activity_telephonelogin;
    }

    @Override
    public void initView(View view) {
        window = (RelativeLayout) view.findViewById(R.id.window);
        telephone = (EditText) view.findViewById(R.id.telephone);
        password = (EditText) view.findViewById(R.id.password);
        code_text = (TextView) view.findViewById(R.id.code_text);
        login_button = (TextView) view.findViewById(R.id.login_button);
        back_img = (ImageView) view.findViewById(R.id.back_img);
    }

    @Override
    public void doBusiness(Context mContext) {
        window.setOnClickListener(this);
        back_img.setOnClickListener(this);
        login_button.setOnClickListener(this);
        code_text.setOnClickListener(this);


        telephone.setOnFocusChangeListener(this);
        password.setOnFocusChangeListener(this);
        telephone.addTextChangedListener(this);

    }

    @Override
    public void resume() {

    }

    @Override
    public void destroy() {

    }

    @Override
    public void onClick(View v) {
        String telNum;
        switch (v.getId()) {
            case R.id.window:
                window.setFocusable(true);
                window.setFocusableInTouchMode(true);
                window.requestFocus();
                break;
            case R.id.code_text:

                window.setFocusable(true);
                window.setFocusableInTouchMode(true);
                window.requestFocus();

                telNum = telephone.getText().toString();

                getTelephoneCode(telNum);
                break;
            case R.id.back_img:
                finish();
                break;
            case R.id.login_button:
                telNum = telephone.getText().toString();
                String code = password.getText().toString();
                goToLogin(telNum, code);
                break;
        }
    }

    private void goToLogin(String telNum, String code) {
        if (!Utils.checkPhoneNumber(telNum)) {
            Toast.makeText(this, "请输入正确的手机号", Toast.LENGTH_SHORT).show();
            return;
        }
        if (code.equals("")) {
            Toast.makeText(this, "请输入验证码", Toast.LENGTH_SHORT).show();
            return;
        }

        GetTokenByMobilephone(telNum, code);


    }

    @Override
    public void onFocusChange(View v, boolean hasFocus) {
        if (!hasFocus) {

            InputMethodManager imm = (InputMethodManager)
                    getSystemService(Context.INPUT_METHOD_SERVICE);

            imm.hideSoftInputFromWindow(window.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);


        }
    }


    public void GetTokenByMobilephone(String mobilephone, String captcha) {
        try {
            JSONObject jsonObject = new JSONObject();
            jsonObject.put("mobilephone", mobilephone);
            jsonObject.put("app_key", BASE_APP_KEY);
            jsonObject.put("captcha", captcha);
            String content = jsonObject.toString();
            OkHttpUtils.postString()
                    .url(BASE_URL_HEAD + "token" + Signature.UrlSignature())
                    .addHeader("Content-Type", "application/json")
                    .content(content)
                    .mediaType(MediaType.parse("application/json; charset=utf-8"))
                    .build().execute(new BaseStringCallback() {
                                         @Override
                                         public void onError(Call call, Exception e, int id) {
                                             e.printStackTrace();
                                         }

                                         @Override
                                         public void onResponse(String response, int id) {

                                             if (response != null) {
                                                 Gson gson = new Gson();
                                                 final RequestBean requestBean = gson.fromJson(response, RequestBean.class);
                                                 if (requestBean.isResult()) {
                                                     response = requestBean.getResponse();
                                                     putAuthorization(response);
                                                 } else {
                                                     runOnUiThread(new Runnable() {
                                                         @Override
                                                         public void run() {
                                                             String response1 = requestBean.getResponse();
                                                             try {
                                                                 JSONObject object = new JSONObject(response1);
                                                                 object.getString("");
                                                             } catch (JSONException e) {
                                                                 e.printStackTrace();
                                                             }

                                                             Toast.makeText(YLTelephoneLoginActivity.this, "登录失败 验证码不正确或已过期", Toast.LENGTH_SHORT).show();
                                                         }
                                                     });
                                                 }

                                             }

                                         }
                                     }

            );

        } catch (JSONException e) {
            e.printStackTrace();
        }

    }

    public void putAuthorization(String response) {
        try {
            JSONObject jsonObject = new JSONObject(response);
            String app_key = jsonObject.getString("app_key");
            String app_token = jsonObject.getString("app_token");
            String user_id = jsonObject.getString("user_id");
            String Authorization = EncryptionTools.BASE64(app_key + ":" + app_token + ":" + user_id);
            SPUtils.put(this, USERID_Authorization, Authorization);


            OkHttpUtils.get()
                    .url(BASE_URL_HEAD + "user/" + user_id + Signature.UrlSignature())
                    .headers(Signature.UrlHeaders(this))
                    .build()
                    .execute(new BaseStringCallback() {
                        @Override
                        public void onError(Call call, Exception e, int id) {
                            e.printStackTrace();
                            Toast.makeText(getContext(), "网络出错，请稍后再试", Toast.LENGTH_SHORT).show();
                        }

                        @Override
                        public void onResponse(String response, int id) {
                            if (response != null) {
                                Gson gson = new Gson();
                                RequestBean requestBean = gson.fromJson(response, RequestBean.class);
                                if (requestBean.isResult()) {
                                    response = requestBean.getResponse();
                                    SPUtils.put(YLTelephoneLoginActivity.this, USER_INFO, response);
                                    // TODO: 2017/3/13 加载动画
                                    Toast.makeText(YLTelephoneLoginActivity.this, "登录成功", Toast.LENGTH_SHORT).show();

                                    if (IntentModule.getPromise() != null) {
                                        IntentModule.getPromise().resolve("登录成功");
                                        IntentModule.setPromise(null);
                                    } else if (BridgeNativeModule.getPromise() != null) {
                                        BridgeNativeModule.getPromise().resolve("登录成功");
                                        BridgeNativeModule.setPromise(null);
                                    }


                                    MainApplication application = (MainApplication) getApplication();
                                    ReactContext reactContext = application.getReactContext();
                                    if (reactContext != null) {
                                        WritableMap params = new WritableNativeMap();
                                        params.putBoolean("LoginSuccess", true);
                                        reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit("LoginSuccess", params);
                                    }
                                    EventBus.getDefault().post("finish");
                                    Intent intent = new Intent(getApplicationContext(), YLMainActivity.class);
                                    startActivity(intent);
                                    finish();
                                } else {
                                    Toast.makeText(YLTelephoneLoginActivity.this, "requestBean.getCode():" + requestBean.getCode(), Toast.LENGTH_SHORT).show();
                                }
                            }
                        }
                    });

        } catch (JSONException e) {
            e.printStackTrace();
        }
    }


    private void changeBtnGetCode() {

        Thread thread = new Thread() {
            @Override
            public void run() {
                if (tag) {
                    while (i > 0) {
                        i--;
                        if (YLTelephoneLoginActivity.this == null) {
                            break;
                        }

                        YLTelephoneLoginActivity.this
                                .runOnUiThread(new Runnable() {
                                    @Override
                                    public void run() {
                                        code_text.setText("" + i);
                                        code_text.setClickable(false);
                                        code_text.setSelected(false);
                                    }
                                });
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException e) {
                            throw new RuntimeException(e);
                        }
                    }
                    tag = false;
                }
                i = 120;
                tag = true;
                if (YLTelephoneLoginActivity.this != null) {
                    YLTelephoneLoginActivity.this.runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            code_text.setText("获取验证码");
                            code_text.setClickable(true);
                            code_text.setSelected(true);
                        }
                    });
                }
            }

        };
        thread.start();
    }

    public void getTelephoneCode(String telNum) {
        if (!Utils.checkPhoneNumber(telNum)) {
            Toast.makeText(this, "请输入正确的手机号", Toast.LENGTH_SHORT).show();
            return;
        }
        changeBtnGetCode();
        code_text.setClickable(false);

        try {
            JSONObject jsonObject = new JSONObject();
            jsonObject.put("mobilephone", telNum);
            jsonObject.put("app_key", BASE_APP_KEY);
            String content = jsonObject.toString();
            OkHttpUtils.postString()
                    .url(BASE_URL_HEAD + "token" + Signature.UrlSignature())
                    .addHeader("Content-Type", "application/json")
                    .content(content)
                    .mediaType(MediaType.parse("application/json; charset=utf-8"))
                    .build().execute(new StringCallback() {
                @Override
                public void onError(Call call, Exception e, int id) {
                    e.printStackTrace();
                }

                @Override
                public void onResponse(String response, int id) {
                    try {
                        JSONObject resultJson = new JSONObject(response);
                        boolean result = resultJson.getBoolean("result");
                        if (!result) {
                            i = 5;
                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    AlertDialog.Builder builder = new AlertDialog.Builder(YLTelephoneLoginActivity.this);
                                    builder.setTitle("获取失败");
                                    builder.setMessage("该手机号尚未绑定友邻优课账号。\n 请使用微信登录后到“我”-“设置”页面绑定手机后重试。");
                                    builder.setPositiveButton("好的", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            dialog.dismiss();
                                        }
                                    });
                                    AlertDialog alertDialog = builder.create();
                                    if (!alertDialog.isShowing()) {
                                        alertDialog.show();
                                    }
                                }
                            });
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            });

        } catch (JSONException e) {
            e.printStackTrace();

        }

    }


    @Override
    public void beforeTextChanged(CharSequence s, int start, int count, int after) {

    }

    @Override
    public void onTextChanged(CharSequence s, int start, int before, int count) {


    }

    @Override
    public void afterTextChanged(Editable s) {
        int length = s.length();
        if (length == 11) {
            if (Utils.checkPhoneNumber(s.toString())) {
                code_text.setSelected(true);
            }
        } else {
            code_text.setSelected(false);

        }
    }
}
