/**
 * Created by 艺术家 on 2017/3/1.
 */

import React, { Component } from 'react';
import {
    Alert,
    NetInfo,
    Clipboard
} from 'react-native';
import *as RnNativeModules from '../configs/RnNativeModules.js';
import Service from '../configs/Service.js';
import g_AppValue from '../configs/AppGlobal.js';
import Toast from 'react-native-root-toast';

export default {
    //格式化日期
    dateFormat: function (intime, type) {
        let newDate = new Date(intime * 1000);
        let s = newDate.getSeconds(),
            m = newDate.getMinutes(),
            h = newDate.getHours(),
            d = newDate.getDate(),
            M = 1 + newDate.getMonth(),
            y = newDate.getFullYear();

        if (type == "yyyy-MM-dd") {
            return y + "-" + M + "-" + d
        } else {
            return y + "-" + M + "-" + d
        }
    },
    //获取1"22'形式的时长字符串
    timeFormat: function (second) {
        let min = Math.floor(second / 60);
        let sec = second % 60;
        sec = sec < 10 ? ('0' + sec) : sec;
        return (min + "\" " + sec + "\'");
    },
    //获取当前是间
    getBaseTime: function (date) {
        var newDate = new Date();
        var minutes = newDate.getMinutes();
        var seconds = newDate.getSeconds();
        var hours = newDate.getHours();
        var baseTimes = parseInt(newDate.getTime() / 1000) - minutes * 60 - seconds - hours * 60 * 60;
        return baseTimes;
    },
    //获取时间
    getDiffTime: function (time) {
        var minute = 1000 * 60;
        var hour = minute * 60;
        var day = hour * 24;
        var halfamonth = day * 15;
        var month = day * 30;
        var year = month * 12;

        var now = new Date().getTime();
        var diffValue = now - time.getTime();
        if (diffValue / year >= 1) {
            return parseInt(diffValue / year) + "年前";
        } else if (diffValue / month >= 1) {
            return parseInt(diffValue / month) + "个月前";
        } else if (diffValue / (7 * day) >= 1) {
            return parseInt(diffValue / (7 * day)) + "周前";
        } else if (diffValue / day >= 1) {
            return parseInt(diffValue / day) + "天前";
        } else if (diffValue / hour >= 1) {
            return parseInt(diffValue / hour) + "小时前";
        } else if (diffValue / minute >= 1) {
            return parseInt(diffValue / minute) + "分钟前";
        } else {
            return "刚刚";
        }
    },
    //alert
    alert: function (info) {
        let title = info.title || "",
            msg = info.msg || "",
            okBtn = info.okBtn || "确定",
            cancelBtn = info.cancelBtn || "取消",
            okFun = info.okFun || function () {
            },
            cancelFun = info.cancelFun || function () {
            };
        oneBtn = info.oneBtn || '',
            oneFunc = info.oneFunc || function () {
            };
        Alert.alert(
            title,
            msg,
            [
                //{text: oneBtn, onPress:oneFunc},
                { text: okBtn, onPress: okFun },
                { text: cancelBtn, onPress: cancelFun },
            ],
            { cancelable: false }
        )
    },
    //alert
    alertDialog: function (info) {
        let title = info.title || "",
            msg = info.msg || "",
            okBtn = info.okBtn || "确定",
            cancelBtn = info.cancelBtn || "取消",
            okFun = info.okFun || function () {
            },
            cancelFun = info.cancelFun || function () {
            },
            oneBtn = info.oneBtn || '',
            oneFun = info.oneFun || function () {
            };
        Alert.alert(
            title,
            msg,
            [
                { text: oneBtn, onPress: oneFun },
                { text: okBtn, onPress: okFun },
                { text: cancelBtn, onPress: cancelFun },
            ],
            { cancelable: false }
        )
    },
    //正则 判断手机号码
    isMobilephone: function (value) {
        if (value == '') return false;
        var reg = /^[1][3,4,5,7,8]\d{9}$/;
        return reg.test(value);
    },
    //正则判断qq号
    isQQ: function (value) {
        if (value == '') return false;
        var reg = /^\d{5,10}$/;
        return reg.test(value);
    },
    //正则判断微信
    isWechat: function (value) {
        if (value == '') return false;
        var reg = /^[a-zA-Z]{1}[-_a-zA-Z\d]{5,19}$/;
        return reg.test(value);
    },
    //判断是否是会员
    isVip: function (currentUser) {
        return !!(currentUser.vip && currentUser.id > 0 &&
            (currentUser.vip.is_permanent === true ||
                currentUser.vip.end_time > (new Date().getTime() / 1000)
            )
        );
    },
    //判断是否是永久会员
    isPermanent: function (currentUser) {
        return (currentUser.vip && currentUser.vip.is_permanent);
    },
    //复制微信号并打开微信
    openWx: function (wechat) {
        Clipboard.setString(wechat);
        RnNativeModules.openWX();
    },
    AppToast: function (message) {
        let toast = Toast.show(message, {
            duration: Toast.durations.SHORT,
            position: Toast.positions.CENTER,
            shadow: false,
            animation: true,
            hideOnPress: true,
            delay: 0,
            onShow: () => {
                // calls on toast\`s appear animation start
            },
            onShown: () => {
                // calls on toast\`s appear animation end.
            },
            onHide: () => {
                // calls on toast\`s hide animation start.
            },
            onHidden: () => {
                // calls on toast\`s hide animation end.
            }
        });
        // You can manually hide the Toast, or it will automatically disappear after a `duration` ms timeout.
        setTimeout(function () {
            Toast.hide(toast);
        }, 1000);
    }
}
